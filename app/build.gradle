apply plugin: 'com.android.application'

//生成打包时间
static def releaseTime() {
    return new Date().format("yyyy-MM-dd+HH")
}

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]

    defaultConfig {
        applicationId rootProject.ext.android["applicationId"]
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]

        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]

        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                //配置注解解析参数
                arguments = [
                        eventBusIndex: 'com.market.tjk.module.EventBusIndex',//EventBus注解 生成的类全名
                        moduleName   : "app"//路由配置
                ]
            }
        }

    }

    signingConfigs {
        config {
            storeFile file("../keystore.jks")
            keyAlias "vip"
            keyPassword "blackvip"
            storePassword "blackvipmarket"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }

        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
    }

    compileOptions {
        sourceCompatibility rootProject.ext.sourceCompatibilityVersion
        targetCompatibility rootProject.ext.targetCompatibilityVersion
    }

    flavorDimensions("channle")


    productFlavors {

        _baidu {
            dimension "channle"
            buildConfigField("String", "CHANNLE", "\"${name}\"")
        }

        _yyb {
            dimension "channle"
            buildConfigField("String", "CHANNLE", "\"${name}\"")

        }

        _yybcpd {
            dimension "channle"
            buildConfigField("String", "CHANNLE", "\"${name}\"")

        }

        _360 {
            dimension "channle"
            buildConfigField("String", "CHANNLE", "\"${name}\"")
        }

        _xiaomi {
            dimension "channle"
            buildConfigField("String", "CHANNLE", "\"${name}\"")
        }


        _wandoujia {
            dimension "channle"
            buildConfigField("String", "CHANNLE", "\"${name}\"")
        }

        _meizu {
            dimension "channle"
            buildConfigField("String", "CHANNLE", "\"${name}\"")
        }
        _vivo {
            dimension "channle"
            buildConfigField("String", "CHANNLE", "\"${name}\"")
        }

        _oppo {
            dimension "channle"
            buildConfigField("String", "CHANNLE", "\"${name}\"")
        }

        _huawei {
            dimension "channle"
            buildConfigField("String", "CHANNLE", "\"${name}\"")
        }

        _sumsung {
            dimension "channle"
            buildConfigField("String", "CHANNLE", "\"${name}\"")
        }

        _chuizi {
            dimension "channle"
            buildConfigField("String", "CHANNLE", "\"${name}\"")
        }

        _sogo {
            dimension "channle"
            buildConfigField("String", "CHANNLE", "\"${name}\"")
        }

        _leshi {
            dimension "channle"
            buildConfigField("String", "CHANNLE", "\"${name}\"")
        }

        _mumayi{
            dimension "channle"
            buildConfigField("String", "CHANNLE", "\"${name}\"")
        }

        _zhubao {
            dimension "channle"
            buildConfigField("String", "CHANNLE", "\"${name}\"")
        }

    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            //修改打包输出文件名
            def outputFile = outputFileName
            if (outputFile != null && outputFile.endsWith('.apk')) {
                def fileName = "black_${defaultConfig.versionName}_${releaseTime()}_${variant.productFlavors[0].name}.apk"
                outputFileName = fileName
            }
        }
    }

}



tasks.withType(JavaCompile) { javaOptions ->
    javaOptions.options.encoding = "UTF-8"
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation rootProject.ext.dependencies["llogger"]
    implementation rootProject.ext.dependencies["multidex"]
    implementation rootProject.ext.dependencies["support-annotations"]
    implementation rootProject.ext.dependencies["appcompat-v7"]
    implementation project(':library')
    implementation(rootProject.ext.dependencies["butterknife"]) {
        exclude group: 'com.android.support', module: 'support-compat'
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    annotationProcessor rootProject.ext.dependencies["butterknife-compiler"]

    implementation rootProject.ext.dependencies["reversesuper-annotation"]
    annotationProcessor rootProject.ext.dependencies["reversesuper-compiler"]

    implementation rootProject.ext.dependencies["okhttp"]
    implementation rootProject.ext.dependencies["retrofit2"]
    implementation rootProject.ext.dependencies["retrofit2-converter-gson"]

    implementation rootProject.ext.dependencies["glide"]
    annotationProcessor rootProject.ext.dependencies["glide-compiler"]
    implementation rootProject.ext.dependencies["glide-okhttp3-integration"]
    implementation rootProject.ext.dependencies["glide-transformations"]

    testImplementation rootProject.ext.dependencies["junit"]

    //support

    implementation rootProject.ext.dependencies["support-compat"]
    implementation rootProject.ext.dependencies["support-core-utils"]
    implementation rootProject.ext.dependencies["support-core-ui"]
    implementation rootProject.ext.dependencies["support-media-compat"]
    implementation rootProject.ext.dependencies["support-fragment"]
    implementation rootProject.ext.dependencies["support-annotations"]
    implementation rootProject.ext.dependencies["design"]
    implementation rootProject.ext.dependencies["appcompat-v7"]
    implementation rootProject.ext.dependencies["recyclerview-v7"]
    implementation rootProject.ext.dependencies["cardview-v7"]
    implementation rootProject.ext.dependencies["gridlayout-v7"]
    implementation 'pub.devrel:easypermissions:1.2.0'
    testImplementation rootProject.ext.dependencies["json"]
    //idling需要注入到release版
    implementation rootProject.ext.dependencies["espresso-idling"]
    implementation 'com.readystatesoftware.systembartint:systembartint:1.0.3'
    testImplementation rootProject.ext.dependencies["junit"]
    testImplementation rootProject.ext.dependencies["mockito-core"]
    testImplementation rootProject.ext.dependencies["mockito-inline"]
    testImplementation rootProject.ext.dependencies["hamcrest"]

    androidTestImplementation rootProject.ext.dependencies["mockito-android"]
    androidTestImplementation rootProject.ext.dependencies["mockito-core"]
    androidTestImplementation rootProject.ext.dependencies["runner"]
    androidTestImplementation rootProject.ext.dependencies["rules"]
    androidTestImplementation rootProject.ext.dependencies["junit"]

    androidTestImplementation rootProject.ext.dependencies["espresso-core"]
    androidTestImplementation rootProject.ext.dependencies["espresso-contrib"]
    androidTestImplementation rootProject.ext.dependencies["espresso-intents"]

    //Resolve conflicts between main and test APK:
    androidTestImplementation rootProject.ext.dependencies["support-compat"]
    androidTestImplementation rootProject.ext.dependencies["support-core-utils"]
    androidTestImplementation rootProject.ext.dependencies["support-core-ui"]
    androidTestImplementation rootProject.ext.dependencies["support-media-compat"]
    androidTestImplementation rootProject.ext.dependencies["support-fragment"]
    androidTestImplementation rootProject.ext.dependencies["support-annotations"]
    androidTestImplementation rootProject.ext.dependencies["design"]
    androidTestImplementation rootProject.ext.dependencies["appcompat-v7"]
    androidTestImplementation rootProject.ext.dependencies["recyclerview-v7"]
    androidTestImplementation rootProject.ext.dependencies["cardview-v7"]
    androidTestImplementation rootProject.ext.dependencies["gridlayout-v7"]
}
